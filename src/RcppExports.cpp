// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// beta_fun_AGamma_process_cube
NumericVector beta_fun_AGamma_process_cube(ComplexVector U_, ComplexVector Sigma_);
RcppExport SEXP _vnpctest_beta_fun_AGamma_process_cube(SEXP U_SEXP, SEXP Sigma_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type U_(U_SEXP);
    Rcpp::traits::input_parameter< ComplexVector >::type Sigma_(Sigma_SEXP);
    rcpp_result_gen = Rcpp::wrap(beta_fun_AGamma_process_cube(U_, Sigma_));
    return rcpp_result_gen;
END_RCPP
}
// get_mix_rcpp
arma::cx_cube get_mix_rcpp(ComplexVector w_, arma::cx_mat densities);
RcppExport SEXP _vnpctest_get_mix_rcpp(SEXP w_SEXP, SEXP densitiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type w_(w_SEXP);
    Rcpp::traits::input_parameter< arma::cx_mat >::type densities(densitiesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mix_rcpp(w_, densities));
    return rcpp_result_gen;
END_RCPP
}
// cubeTimesVector
arma::cx_cube cubeTimesVector(ComplexVector U_, NumericVector r);
RcppExport SEXP _vnpctest_cubeTimesVector(SEXP U_SEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type U_(U_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(cubeTimesVector(U_, r));
    return rcpp_result_gen;
END_RCPP
}
// get_w_rcpp
arma::cx_cube get_w_rcpp(ComplexVector p_, NumericVector Z, unsigned k);
RcppExport SEXP _vnpctest_get_w_rcpp(SEXP p_SEXP, SEXP ZSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< unsigned >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(get_w_rcpp(p_, Z, k));
    return rcpp_result_gen;
END_RCPP
}
// lalphaStar_AGamma
NumericVector lalphaStar_AGamma(ComplexVector U_, double eta, ComplexVector Sigma_);
RcppExport SEXP _vnpctest_lalphaStar_AGamma(SEXP U_SEXP, SEXP etaSEXP, SEXP Sigma_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type U_(U_SEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< ComplexVector >::type Sigma_(Sigma_SEXP);
    rcpp_result_gen = Rcpp::wrap(lalphaStar_AGamma(U_, eta, Sigma_));
    return rcpp_result_gen;
END_RCPP
}
// cx_cube_from_ComplexVector
arma::cx_cube cx_cube_from_ComplexVector(ComplexVector x);
RcppExport SEXP _vnpctest_cx_cube_from_ComplexVector(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cx_cube_from_ComplexVector(x));
    return rcpp_result_gen;
END_RCPP
}
// cube_from_NumericVector
arma::cube cube_from_NumericVector(NumericVector x);
RcppExport SEXP _vnpctest_cube_from_NumericVector(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cube_from_NumericVector(x));
    return rcpp_result_gen;
END_RCPP
}
// varma_transfer2psd
arma::cx_cube varma_transfer2psd(ComplexVector transfer_ar_, ComplexVector transfer_ma_, arma::cx_mat sigma);
RcppExport SEXP _vnpctest_varma_transfer2psd(SEXP transfer_ar_SEXP, SEXP transfer_ma_SEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type transfer_ar_(transfer_ar_SEXP);
    Rcpp::traits::input_parameter< ComplexVector >::type transfer_ma_(transfer_ma_SEXP);
    Rcpp::traits::input_parameter< arma::cx_mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(varma_transfer2psd(transfer_ar_, transfer_ma_, sigma));
    return rcpp_result_gen;
END_RCPP
}
// transfer_polynomial
arma::cx_cube transfer_polynomial(NumericVector lambda, arma::mat coef);
RcppExport SEXP _vnpctest_transfer_polynomial(SEXP lambdaSEXP, SEXP coefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type coef(coefSEXP);
    rcpp_result_gen = Rcpp::wrap(transfer_polynomial(lambda, coef));
    return rcpp_result_gen;
END_RCPP
}
// realValuedPsd
arma::cube realValuedPsd(ComplexVector f_);
RcppExport SEXP _vnpctest_realValuedPsd(SEXP f_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type f_(f_SEXP);
    rcpp_result_gen = Rcpp::wrap(realValuedPsd(f_));
    return rcpp_result_gen;
END_RCPP
}
// epsilon_var
arma::mat epsilon_var(arma::mat zt, arma::mat ar);
RcppExport SEXP _vnpctest_epsilon_var(SEXP ztSEXP, SEXP arSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type zt(ztSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ar(arSEXP);
    rcpp_result_gen = Rcpp::wrap(epsilon_var(zt, ar));
    return rcpp_result_gen;
END_RCPP
}
// sldmvnorm
double sldmvnorm(arma::mat z_t, arma::mat Sigma);
RcppExport SEXP _vnpctest_sldmvnorm(SEXP z_tSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type z_t(z_tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(sldmvnorm(z_t, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// acvToeplitz
arma::mat acvToeplitz(arma::mat acv);
RcppExport SEXP _vnpctest_acvToeplitz(SEXP acvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type acv(acvSEXP);
    rcpp_result_gen = Rcpp::wrap(acvToeplitz(acv));
    return rcpp_result_gen;
END_RCPP
}
// get_CFZ
arma::cx_mat get_CFZ(arma::cx_mat FZ, ComplexVector f_half_inv_, ComplexVector f_param_half_, bool excludeBoundary);
RcppExport SEXP _vnpctest_get_CFZ(SEXP FZSEXP, SEXP f_half_inv_SEXP, SEXP f_param_half_SEXP, SEXP excludeBoundarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cx_mat >::type FZ(FZSEXP);
    Rcpp::traits::input_parameter< ComplexVector >::type f_half_inv_(f_half_inv_SEXP);
    Rcpp::traits::input_parameter< ComplexVector >::type f_param_half_(f_param_half_SEXP);
    Rcpp::traits::input_parameter< bool >::type excludeBoundary(excludeBoundarySEXP);
    rcpp_result_gen = Rcpp::wrap(get_CFZ(FZ, f_half_inv_, f_param_half_, excludeBoundary));
    return rcpp_result_gen;
END_RCPP
}
// get_CFZ_q
arma::cx_mat get_CFZ_q(arma::cx_mat FZ, ComplexVector q_, ComplexVector f_param_half_, bool excludeBoundary);
RcppExport SEXP _vnpctest_get_CFZ_q(SEXP FZSEXP, SEXP q_SEXP, SEXP f_param_half_SEXP, SEXP excludeBoundarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cx_mat >::type FZ(FZSEXP);
    Rcpp::traits::input_parameter< ComplexVector >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< ComplexVector >::type f_param_half_(f_param_half_SEXP);
    Rcpp::traits::input_parameter< bool >::type excludeBoundary(excludeBoundarySEXP);
    rcpp_result_gen = Rcpp::wrap(get_CFZ_q(FZ, q_, f_param_half_, excludeBoundary));
    return rcpp_result_gen;
END_RCPP
}
// chol_cube
arma::cx_cube chol_cube(ComplexVector f_, bool excludeBoundary);
RcppExport SEXP _vnpctest_chol_cube(SEXP f_SEXP, SEXP excludeBoundarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type f_(f_SEXP);
    Rcpp::traits::input_parameter< bool >::type excludeBoundary(excludeBoundarySEXP);
    rcpp_result_gen = Rcpp::wrap(chol_cube(f_, excludeBoundary));
    return rcpp_result_gen;
END_RCPP
}
// inv_cube
arma::cx_cube inv_cube(ComplexVector f_, bool excludeBoundary);
RcppExport SEXP _vnpctest_inv_cube(SEXP f_SEXP, SEXP excludeBoundarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type f_(f_SEXP);
    Rcpp::traits::input_parameter< bool >::type excludeBoundary(excludeBoundarySEXP);
    rcpp_result_gen = Rcpp::wrap(inv_cube(f_, excludeBoundary));
    return rcpp_result_gen;
END_RCPP
}
// mult_cube
arma::cx_cube mult_cube(ComplexVector a_, ComplexVector b_);
RcppExport SEXP _vnpctest_mult_cube(SEXP a_SEXP, SEXP b_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type a_(a_SEXP);
    Rcpp::traits::input_parameter< ComplexVector >::type b_(b_SEXP);
    rcpp_result_gen = Rcpp::wrap(mult_cube(a_, b_));
    return rcpp_result_gen;
END_RCPP
}
// logdet_cube
NumericVector logdet_cube(ComplexVector f_, bool excludeBoundary);
RcppExport SEXP _vnpctest_logdet_cube(SEXP f_SEXP, SEXP excludeBoundarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type f_(f_SEXP);
    Rcpp::traits::input_parameter< bool >::type excludeBoundary(excludeBoundarySEXP);
    rcpp_result_gen = Rcpp::wrap(logdet_cube(f_, excludeBoundary));
    return rcpp_result_gen;
END_RCPP
}
// const_cube
arma::cx_cube const_cube(arma::cx_mat sigma, unsigned N);
RcppExport SEXP _vnpctest_const_cube(SEXP sigmaSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cx_mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< unsigned >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(const_cube(sigma, N));
    return rcpp_result_gen;
END_RCPP
}
// trans_cube
arma::cx_cube trans_cube(ComplexVector f_);
RcppExport SEXP _vnpctest_trans_cube(SEXP f_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type f_(f_SEXP);
    rcpp_result_gen = Rcpp::wrap(trans_cube(f_));
    return rcpp_result_gen;
END_RCPP
}
// rev_cube
arma::cx_cube rev_cube(ComplexVector f_);
RcppExport SEXP _vnpctest_rev_cube(SEXP f_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type f_(f_SEXP);
    rcpp_result_gen = Rcpp::wrap(rev_cube(f_));
    return rcpp_result_gen;
END_RCPP
}
// c_cube
arma::cx_cube c_cube(ComplexVector f_, ComplexVector g_);
RcppExport SEXP _vnpctest_c_cube(SEXP f_SEXP, SEXP g_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type f_(f_SEXP);
    Rcpp::traits::input_parameter< ComplexVector >::type g_(g_SEXP);
    rcpp_result_gen = Rcpp::wrap(c_cube(f_, g_));
    return rcpp_result_gen;
END_RCPP
}
// rcWishart
arma::cx_mat rcWishart(unsigned nu, arma::cx_mat Sigma_half);
RcppExport SEXP _vnpctest_rcWishart(SEXP nuSEXP, SEXP Sigma_halfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::cx_mat >::type Sigma_half(Sigma_halfSEXP);
    rcpp_result_gen = Rcpp::wrap(rcWishart(nu, Sigma_half));
    return rcpp_result_gen;
END_RCPP
}
// chol_cpp
arma::cx_mat chol_cpp(arma::cx_mat A);
RcppExport SEXP _vnpctest_chol_cpp(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cx_mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(chol_cpp(A));
    return rcpp_result_gen;
END_RCPP
}
// hasEigenValueSmallerZero
bool hasEigenValueSmallerZero(arma::cx_mat A, double TOL);
RcppExport SEXP _vnpctest_hasEigenValueSmallerZero(SEXP ASEXP, SEXP TOLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cx_mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type TOL(TOLSEXP);
    rcpp_result_gen = Rcpp::wrap(hasEigenValueSmallerZero(A, TOL));
    return rcpp_result_gen;
END_RCPP
}
// tr
arma::cx_double tr(arma::cx_mat A);
RcppExport SEXP _vnpctest_tr(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cx_mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(tr(A));
    return rcpp_result_gen;
END_RCPP
}
// matCond
double matCond(arma::cx_mat A);
RcppExport SEXP _vnpctest_matCond(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cx_mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(matCond(A));
    return rcpp_result_gen;
END_RCPP
}
// numericalUnstable
bool numericalUnstable(ComplexVector f_, bool excludeBoundary, double TOL);
RcppExport SEXP _vnpctest_numericalUnstable(SEXP f_SEXP, SEXP excludeBoundarySEXP, SEXP TOLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type f_(f_SEXP);
    Rcpp::traits::input_parameter< bool >::type excludeBoundary(excludeBoundarySEXP);
    Rcpp::traits::input_parameter< double >::type TOL(TOLSEXP);
    rcpp_result_gen = Rcpp::wrap(numericalUnstable(f_, excludeBoundary, TOL));
    return rcpp_result_gen;
END_RCPP
}
// acceptanceRate
double acceptanceRate(NumericVector trace);
RcppExport SEXP _vnpctest_acceptanceRate(SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(acceptanceRate(trace));
    return rcpp_result_gen;
END_RCPP
}
// cholesky_xFromPhi
NumericVector cholesky_xFromPhi(NumericVector phi);
RcppExport SEXP _vnpctest_cholesky_xFromPhi(SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(cholesky_xFromPhi(phi));
    return rcpp_result_gen;
END_RCPP
}
// cholseky_LFromx
arma::cx_mat cholseky_LFromx(arma::vec x);
RcppExport SEXP _vnpctest_cholseky_LFromx(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cholseky_LFromx(x));
    return rcpp_result_gen;
END_RCPP
}
// cholesky_jacobianLogDeterminant
double cholesky_jacobianLogDeterminant(NumericVector phi);
RcppExport SEXP _vnpctest_cholesky_jacobianLogDeterminant(SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(cholesky_jacobianLogDeterminant(phi));
    return rcpp_result_gen;
END_RCPP
}
// cholesky_pVec
NumericVector cholesky_pVec(unsigned d);
RcppExport SEXP _vnpctest_cholesky_pVec(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(cholesky_pVec(d));
    return rcpp_result_gen;
END_RCPP
}
// cholesky_qVec
NumericVector cholesky_qVec(unsigned d);
RcppExport SEXP _vnpctest_cholesky_qVec(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(cholesky_qVec(d));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _vnpctest_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_vnpctest_beta_fun_AGamma_process_cube", (DL_FUNC) &_vnpctest_beta_fun_AGamma_process_cube, 2},
    {"_vnpctest_get_mix_rcpp", (DL_FUNC) &_vnpctest_get_mix_rcpp, 2},
    {"_vnpctest_cubeTimesVector", (DL_FUNC) &_vnpctest_cubeTimesVector, 2},
    {"_vnpctest_get_w_rcpp", (DL_FUNC) &_vnpctest_get_w_rcpp, 3},
    {"_vnpctest_lalphaStar_AGamma", (DL_FUNC) &_vnpctest_lalphaStar_AGamma, 3},
    {"_vnpctest_cx_cube_from_ComplexVector", (DL_FUNC) &_vnpctest_cx_cube_from_ComplexVector, 1},
    {"_vnpctest_cube_from_NumericVector", (DL_FUNC) &_vnpctest_cube_from_NumericVector, 1},
    {"_vnpctest_varma_transfer2psd", (DL_FUNC) &_vnpctest_varma_transfer2psd, 3},
    {"_vnpctest_transfer_polynomial", (DL_FUNC) &_vnpctest_transfer_polynomial, 2},
    {"_vnpctest_realValuedPsd", (DL_FUNC) &_vnpctest_realValuedPsd, 1},
    {"_vnpctest_epsilon_var", (DL_FUNC) &_vnpctest_epsilon_var, 2},
    {"_vnpctest_sldmvnorm", (DL_FUNC) &_vnpctest_sldmvnorm, 2},
    {"_vnpctest_acvToeplitz", (DL_FUNC) &_vnpctest_acvToeplitz, 1},
    {"_vnpctest_get_CFZ", (DL_FUNC) &_vnpctest_get_CFZ, 4},
    {"_vnpctest_get_CFZ_q", (DL_FUNC) &_vnpctest_get_CFZ_q, 4},
    {"_vnpctest_chol_cube", (DL_FUNC) &_vnpctest_chol_cube, 2},
    {"_vnpctest_inv_cube", (DL_FUNC) &_vnpctest_inv_cube, 2},
    {"_vnpctest_mult_cube", (DL_FUNC) &_vnpctest_mult_cube, 2},
    {"_vnpctest_logdet_cube", (DL_FUNC) &_vnpctest_logdet_cube, 2},
    {"_vnpctest_const_cube", (DL_FUNC) &_vnpctest_const_cube, 2},
    {"_vnpctest_trans_cube", (DL_FUNC) &_vnpctest_trans_cube, 1},
    {"_vnpctest_rev_cube", (DL_FUNC) &_vnpctest_rev_cube, 1},
    {"_vnpctest_c_cube", (DL_FUNC) &_vnpctest_c_cube, 2},
    {"_vnpctest_rcWishart", (DL_FUNC) &_vnpctest_rcWishart, 2},
    {"_vnpctest_chol_cpp", (DL_FUNC) &_vnpctest_chol_cpp, 1},
    {"_vnpctest_hasEigenValueSmallerZero", (DL_FUNC) &_vnpctest_hasEigenValueSmallerZero, 2},
    {"_vnpctest_tr", (DL_FUNC) &_vnpctest_tr, 1},
    {"_vnpctest_matCond", (DL_FUNC) &_vnpctest_matCond, 1},
    {"_vnpctest_numericalUnstable", (DL_FUNC) &_vnpctest_numericalUnstable, 3},
    {"_vnpctest_acceptanceRate", (DL_FUNC) &_vnpctest_acceptanceRate, 1},
    {"_vnpctest_cholesky_xFromPhi", (DL_FUNC) &_vnpctest_cholesky_xFromPhi, 1},
    {"_vnpctest_cholseky_LFromx", (DL_FUNC) &_vnpctest_cholseky_LFromx, 1},
    {"_vnpctest_cholesky_jacobianLogDeterminant", (DL_FUNC) &_vnpctest_cholesky_jacobianLogDeterminant, 1},
    {"_vnpctest_cholesky_pVec", (DL_FUNC) &_vnpctest_cholesky_pVec, 1},
    {"_vnpctest_cholesky_qVec", (DL_FUNC) &_vnpctest_cholesky_qVec, 1},
    {"_vnpctest_rcpp_hello_world", (DL_FUNC) &_vnpctest_rcpp_hello_world, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_vnpctest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
